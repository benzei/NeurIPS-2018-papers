{
    "filename": "7328-a-model-for-learned-bloom-filters-and-optimizing-by-sandwiching.pdf",
    "metadata": {
        "title": "A Model for Learned Bloom Filters and Optimizing by Sandwiching",
        "author": "Michael Mitzenmacher",
        "identifiers": {
            "url": "https://papers.nips.cc/paper/7328-a-model-for-learned-bloom-filters-and-optimizing-by-sandwiching.pdf"
        },
        "journal": "Conference on Neural Information Processing Systems",
        "abstract": "Recent work has suggested enhancing Bloom filters by using a pre-filter, based on applying machine learning to determine a function that models the data set the Bloom filter is meant to represent. Here we model such learned Bloom filters, with the following outcomes: (1) we clarify what guarantees can and cannot be associated with such a structure; (2) we show how to estimate what size the learning function must obtain in order to obtain improved performance; (3) we provide a simple method, sandwiching, for optimizing learned Bloom filters; and (4) we propose a design and analysis approach for a learned Bloomier filter, based on our modeling approach."
    },
    "keywords": [
        {
            "term": "false negative",
            "url": "https://en.wikipedia.org/wiki/false_negative"
        },
        {
            "term": "false positive",
            "url": "https://en.wikipedia.org/wiki/false_positive"
        },
        {
            "term": "bloomier filter",
            "url": "https://en.wikipedia.org/wiki/bloomier_filter"
        },
        {
            "term": "bloom filter",
            "url": "https://en.wikipedia.org/wiki/bloom_filter"
        }
    ],
    "highlights": [
        "\u201cThe Case for Learned Index Structures\u201d [<a class=\"ref-link\" id=\"c7\" href=\"#r7\">7</a>], argues that standard index structures and related structures, such as Bloom filters, could be improved by using machine learning to develop what the authors dub learned index structures",
        "We provide formulae for modeling the false positive rate for a learned Bloom filter, allowing for an estimate of how small the learned function needs to be in order to be effective",
        "As we have described in Section 3.2, in the context of a learned Bloom filter the false positive rate is necessarily tied to the query stream, and is generally an empirically determined quantity, but we take the value Fp here as a given",
        "We have focused on providing a more formal analysis of the proposed learned Bloom filter",
        "We have found that our modeling laeds to a natural and interesting optimization, based on sandwiching, and allows for generalizations to related structures, such as Bloomier filters",
        "For sets that can be accurately predicted by small learned functions, the learned Bloom filter may provide a novel means of obtaining significant performance improvements over standard Bloom filter variants"
    ],
    "key_statements": [
        "\u201cThe Case for Learned Index Structures\u201d [<a class=\"ref-link\" id=\"c7\" href=\"#r7\">7</a>], argues that standard index structures and related structures, such as Bloom filters, could be improved by using machine learning to develop what the authors dub learned index structures",
        "What makes a learned Bloom filter interesting is that it uses a function that can be obtained by \u201clearning\u201d the set K to help determine the appropriate answer; the function acts as a pre-filter that provides a probabilistic estimate that a query key y is in K",
        "We provide formulae for modeling the false positive rate for a learned Bloom filter, allowing for an estimate of how small the learned function needs to be in order to be effective",
        "As we have described in Section 3.2, in the context of a learned Bloom filter the false positive rate is necessarily tied to the query stream, and is generally an empirically determined quantity, but we take the value Fp here as a given",
        "Once the false positives coming through the backup Bloom filter reaches an appropriate level, which, by plugging in the determined optimal value for b2, we find is Fp/",
        "We have focused on providing a more formal analysis of the proposed learned Bloom filter",
        "We have found that our modeling laeds to a natural and interesting optimization, based on sandwiching, and allows for generalizations to related structures, such as Bloomier filters",
        "For sets that can be accurately predicted by small learned functions, the learned Bloom filter may provide a novel means of obtaining significant performance improvements over standard Bloom filter variants"
    ],
    "summary": [
        "\u201cThe Case for Learned Index Structures\u201d [<a class=\"ref-link\" id=\"c7\" href=\"#r7\">7</a>], argues that standard index structures and related structures, such as Bloom filters, could be improved by using machine learning to develop what the authors dub learned index structures.",
        "Performance improves if the size to represent the learned function f and the size of the smaller backup filter for false negatives is smaller than the size of a corresponding Bloom filter with the same false positive rate.",
        "This motivates the following formal definition: Definition 1 A learned Bloom filter on a set of positive keys K and negative keys U is a function f : U \u2192 [0, 1] and threshold \u03c4 , where U is the universe of possible query keys, and an associated standard Bloom filter B, referred to as a backup filter.",
        "This approach is, as we have discussed, suitable for a standard Bloom filter, where the false positive rate is guaranteed to be close to its expected value for any test set, with high probability.",
        "Unlike in the setting of a standard Bloom filter, the false positive probability for a query y can depend on y, even before the function f is instantiated.",
        "If the false positive probability proves higher than desired, one can re-learn a new function f ; again, doing so will require access to K, and maintaining a set U of negative examples.",
        "As we have described in Section 3.2, in the context of a learned Bloom filter the false positive rate is necessarily tied to the query stream, and is generally an empirically determined quantity, but we take the value Fp here as a given.",
        "If our learned function uses 3 bits per item, the learned Bloom filter can use 5m bits for the backup Bloom filter, and achieve a false positive rate of approximately 0.0181.",
        "As before, we use the function f to attempt to remove false positives from the initial Bloom filter, and use the backup filter to allow back in keys from K that were false negatives for f .",
        "We model the false positive rate of a Bloom filter that uses j bits per stored key as \u03b1j for simplicity.",
        "We would provide bits to the backup filter to reduce the (1 \u2212 Fp) rate of false positives subsequent to the learned function.",
        "We have attempted to clarify a particular issue in the Bloom filter setting, namely the dependence of what is referred to as the false positive rate in [<a class=\"ref-link\" id=\"c7\" href=\"#r7\">7</a>] on the query set, and how it might affect the applications this approach is suited for.",
        "For sets that can be accurately predicted by small learned functions, the learned Bloom filter may provide a novel means of obtaining significant performance improvements over standard Bloom filter variants"
    ],
    "headline": "We model such learned Bloom filters, with the following outcomes:  we clarify what guarantees can and cannot be associated with such a structure;  we show how to estimate what size the learning function must obtain in order to obtain improved performance;  we provide a simple method, sandwiching, for optimizing learned Bloom filters; and  we propose a design and analysis approach for a learned Bloomier filter, based on our modeling approach",
    "reference_links": [
        {
            "id": "1",
            "entry": "[1] M. Bender, M. Farach-Colton, M. Goswami, R. Johnson, S. McCauley, and S. Singh. Bloom Filters, Adaptivity, and the Dictionary Problem. https://arxiv.org/abs/1711.01616, 2017.",
            "url": "https://arxiv.org/abs/1711.01616",
            "arxiv_url": "https://arxiv.org/pdf/1711.01616"
        },
        {
            "id": "2",
            "entry": "[2] A. Broder and M. Mitzenmacher. Network Applications of Bloom Filters: A Survey. Internet Mathematics, 1(4):485-509, 2004.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Broder%2C%20A.%20Mitzenmacher%2C%20M.%20Network%20Applications%20of%20Bloom%20Filters%3A%20A%20Survey%202004",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Broder%2C%20A.%20Mitzenmacher%2C%20M.%20Network%20Applications%20of%20Bloom%20Filters%3A%20A%20Survey%202004"
        },
        {
            "id": "3",
            "entry": "[3] D. Charles and K. Chellapilla. Bloomier Filters: A Second Look. In Proceedings of the European Symposium on Algorithms, pp. 259-270, 2008.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Charles%2C%20D.%20Chellapilla%2C%20K.%20Bloomier%20Filters%3A%20A%20Second%20Look%202008",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Charles%2C%20D.%20Chellapilla%2C%20K.%20Bloomier%20Filters%3A%20A%20Second%20Look%202008"
        },
        {
            "id": "4",
            "entry": "[4] B. Chazelle, J. Kilian, R. Rubinfeld, and A. Tal. The Bloomier Filter: an Efficient Data Structure for Static Support Lookup Tables. In Proceedings of the Fifteenth Annual ACM-SIAM Symposium on Discrete Algorithms, pp. 30-39, 2004.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Chazelle%2C%20B.%20Kilian%2C%20J.%20Rubinfeld%2C%20R.%20Tal%2C%20A.%20The%20Bloomier%20Filter%3A%20an%20Efficient%20Data%20Structure%20for%20Static%20Support%20Lookup%20Tables%202004",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Chazelle%2C%20B.%20Kilian%2C%20J.%20Rubinfeld%2C%20R.%20Tal%2C%20A.%20The%20Bloomier%20Filter%3A%20an%20Efficient%20Data%20Structure%20for%20Static%20Support%20Lookup%20Tables%202004"
        },
        {
            "id": "5",
            "entry": "[5] K. Chung, M. Mitzenmacher, and S. Vadhan. Why Simple Hash Functions Work: Exploiting the Entropy in a Data Stream. Theory of Computing, 9(30):897-945, 2013.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Chung%2C%20K.%20Mitzenmacher%2C%20M.%20Vadhan%2C%20S.%20Why%20Simple%20Hash%20Functions%20Work%3A%20Exploiting%20the%20Entropy%20in%20a%20Data%20Stream%202013",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Chung%2C%20K.%20Mitzenmacher%2C%20M.%20Vadhan%2C%20S.%20Why%20Simple%20Hash%20Functions%20Work%3A%20Exploiting%20the%20Entropy%20in%20a%20Data%20Stream%202013"
        },
        {
            "id": "6",
            "entry": "[6] B. Fan, D. Andersen, M. Kaminsky, and M. Mitzenmacher. Cuckoo Filter: Practically Better than Bloom. In Proceedings of the 10th ACM International Conference on Emerging Networking Experiments and Technologies, pp. 75-88, 2014.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Fan%2C%20B.%20Andersen%2C%20D.%20Kaminsky%2C%20M.%20Mitzenmacher%2C%20M.%20Cuckoo%20Filter%3A%20Practically%20Better%20than%20Bloom%202014",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Fan%2C%20B.%20Andersen%2C%20D.%20Kaminsky%2C%20M.%20Mitzenmacher%2C%20M.%20Cuckoo%20Filter%3A%20Practically%20Better%20than%20Bloom%202014"
        },
        {
            "id": "7",
            "entry": "[7] T. Kraska, A. Beutel, E. H. Chi, J. Dean, and N. Polyzotis. The Case for Learned Index Structures. https://arxiv.org/abs/1712.01208, 2017.",
            "url": "https://arxiv.org/abs/1712.01208",
            "arxiv_url": "https://arxiv.org/pdf/1712.01208"
        },
        {
            "id": "8",
            "entry": "[8] M. Mitzenmacher. A Model for Learned Bloom Filters and Related Structures. https://arxiv.org/abs/1802.00884, 2018.",
            "url": "https://arxiv.org/abs/1802.00884",
            "arxiv_url": "https://arxiv.org/pdf/1802.00884"
        },
        {
            "id": "9",
            "entry": "[9] M. Mitzenmacher. Optimizing Learned Bloom Filters by Sandwiching. https://arxiv.org/abs/1803.01474, 2018.",
            "url": "https://arxiv.org/abs/1803.01474",
            "arxiv_url": "https://arxiv.org/pdf/1803.01474"
        },
        {
            "id": "10",
            "entry": "[10] M. Mitzenmacher, S. Pontarelli, and P. Reviriego. Adaptive Cuckoo Filters. In Proceedings of the Twentieth Workshop on Algorithm Engineering and Experiments (ALENEX), pp. 36-47, 2018.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Mitzenmacher%2C%20M.%20Pontarelli%2C%20S.%20Reviriego%2C%20P.%20Adaptive%20Cuckoo%20Filters%202018",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Mitzenmacher%2C%20M.%20Pontarelli%2C%20S.%20Reviriego%2C%20P.%20Adaptive%20Cuckoo%20Filters%202018"
        },
        {
            "id": "11",
            "entry": "[11] M. Mitzenmacher and E. Upfal. Probability and Computing: Randomization and Probabilistic Techniques in Algorithms and Data Analysis. Cambridge University Pres, 2017.",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Mitzenmacher%2C%20M.%20Upfal%2C%20E.%20Probability%20and%20Computing%3A%20Randomization%20and%20Probabilistic%20Techniques%20in%20Algorithms%20and%20Data%20Analysis%202017"
        },
        {
            "id": "12",
            "entry": "[12] M. Naor and E. Yogev. Bloom Filters in Adversarial Environments. In Proceedings of the Annual Cryptography Conference, pp. 565-584, 2015. ",
            "scholar_url": "https://scholar.google.co.uk/scholar?q=Naor%2C%20M.%20Yogev%2C%20E.%20Bloom%20Filters%20in%20Adversarial%20Environments%202015",
            "oa_query": "https://api.scholarcy.com/oa_version?query=Naor%2C%20M.%20Yogev%2C%20E.%20Bloom%20Filters%20in%20Adversarial%20Environments%202015"
        }
    ]
}
